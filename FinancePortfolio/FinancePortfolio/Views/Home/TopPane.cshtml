<div class="container">
    <div class="row py-4 d-flex justify-content-between align-items-center">
        <div class="col col-4 d-flex daterange-input-wrap">
            @(Html.Kendo().DateRangePicker()
            .Name("daterangepicker")
            .Max(DateTime.Today)
            .Labels(false)
            .Events(e => e.Change("handleRangeChange"))
            .HtmlAttributes(new { style = "width: 100%", title = "daterangepicker" })
            )
        </div>

        <ul id="timeFilter" class="k-reset d-flex col-3">
            <li class="ml-3">
                <span>1H</span>
                <span>4H</span>
                <span>12H</span>
                <span>1D</span>
                <span class="selected">4D</span>
                <span>1W</span>
            </li>
        </ul>

        <div class="col-4">
            @(Html.Kendo().DropDownList()
          .Name("interval")
          .DataTextField("Name")
          .DataValueField("Duration")
          .ValueTemplate("<span class='service-category'><strong>Interval: #: Name# </strong></span>")
            .DataSource(source =>
            {
            source.Read(read => read.Action("ReadDropDownListIntervals", "Home"));
            })
            .Events(events =>
                    {
                events.DataBound("onIntervalDDLDataBound");
                events.Change("onIntervalChange");
                events.Open("toggleDisabledStateIntervalDropDown");
                })
            .HtmlAttributes(new { style = "width: 40%" })
            )

            @(Html.Kendo().DropDownList()
          .Name("dropdownChartSelection")
          .DataTextField("Text")
          .DataValueField("Value")
          .ValueTemplate("<span><img src='/assets/#: Value #.png' alt='#: Text #' />   #: Text #</span>")
          .Template("<span><img src='/assets/#: Value #.png' alt='#: Text #' />   #: Text #</span>")
          .Events(e => e.Change("changeChartType"))
          .BindTo(new List<SelectListItem>() {
              new SelectListItem() {
                  Text = "Candle",
                  Value = "candle"
              },
              new SelectListItem() {
                  Text = "Line",
                  Value = "line"
              },
              new SelectListItem() {
                  Text = "Area",
                  Value = "area"
              }
          })
          .Value("1")
          .HtmlAttributes(new { style = "width: 40%" })
            )
        </div>
    </div>

    <div class="row">
        <div class="col">
            @(Html.Kendo().StockChart<FinancePortfolio.Models.StockIntervalDetails>()
                .Name("stockChart")
               // .Events(e => e.DataBound("onDataBound"))
                .DataSource(ds =>
                    ds.Read(read => read.Action("GetChartIntervalDetails", "Home").Data("additionalChartData")
                ))
                .DateField("Date")
                .CategoryAxis(axis => axis
                    .BaseUnitStep(1)
                    .BaseUnit(ChartAxisBaseUnit.Hours)
                    .Crosshair(xh => xh.Visible(true))
                    .MaxDivisions(20)
                    .MinorGridLines(mgl => mgl.Visible(true))
                    .MajorGridLines(mgl => mgl.Visible(true))
                    )
                .ValueAxis(axis =>
                {
                    axis.Numeric("Close").Visible(false);
                    axis.Crosshair(x => x.Visible(true));
                })
                .ValueAxis(axis => axis.Numeric("Volume").Visible(true).Min(0))
                .Series(series =>
                {
                    series.Candlestick(s => s.Open, s => s.High, s => s.Low, s => s.Close)
                        .Aggregate(c => c.Open(ChartSeriesAggregate.First).High(ChartSeriesAggregate.Max).Low(ChartSeriesAggregate.Min))
                        .CategoryField("Date")
                        .Border(b => b.Color("transparent"))
                        .Color("#5CB85C")
                        .DownColor("#D9534F")
                        .CategoryField("Date")
                        .Axis("Close")
                        .OpenField("Open")
                        .CloseField("Close")
                        .HighField("High")
                        .LowField("Low")
                        .Gap(0.75);
                    series.Column(s => s.Volume, s => s.Date)
                        .ColorHandler("itemColor")
                        .Axis("Volume")
                        .Gap(0.75)
                        .Border(b => b.Color("transparent"))
                        .Aggregate(ChartSeriesAggregate.Avg)
                        .Tooltip(t => t.Format("{0:0}"));

                })
                .AutoBind(false)
                .Navigator(nav => nav
                .Series(series =>
                {
                    series.Area(s => s.Close).Aggregate(ChartSeriesAggregate.Avg)
                    .Color("#559DE0")
                    .Field("Close");
                })
                )
            )
        </div>
    </div>
</div>


<script>
    $("#timeFilter li span").click(function () {
        $("li span").not(this).removeClass("selected")
        if (!$(this).hasClass("selected")) {
            $(this).addClass("selected");
        }
       
        var chart = $("#stockChart").data("kendoStockChart")
        var navi = chart.navigator;
        var fixedRangeIndex = $("#timeFilter li span.selected").index()
        var duration = timeFilters[fixedRangeIndex].Duration / toMins;

        end = new Date();
        start = new Date();
        start.setMinutes(end.getMinutes() - duration);
        $("#daterangepicker").getKendoDateRangePicker().range("")

        navi.select(start, end);
        chart.dataSource.read();
    });

</script>
