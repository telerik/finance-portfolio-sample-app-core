

<div class="container bottom-pane-container">
    <div class="d-flex justify-content-center py-5 align-items-center">
        @await Html.PartialAsync("Navigation", new NavigationModel { navigationIndex = 0, currentView = "Home" })
    </div>


    <div class="row py-4 d-flex justify-content-between">
        <div class="col col-3 d-flex justify-content-start px-0">
            @(Html.Kendo().DropDownList()
                .Name("addNew")
                .DataTextField("Symbol")
                .DataValueField("Symbol")
                .Filter("Contains")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetChartData", "Home");
                    });
                    source.ServerFiltering(false);
                })
                .Height(400)
                .Events(e => e.Change("addStock"))
                .ValueTemplate("<span class=\"k-icon k-i-plus\"></span>" +
                              "<span>Add new</span>")
            )
            @(Html.Kendo().Button()
                    .Name("removeButton")
                    .Icon("trash")
                    .HtmlAttributes(new { type = "button" })
                    .Events(ev => ev.Click("removeRow"))
                    .Content("Remove"))
        </div>
    </div>

    <div class="row">
        @(Html.Kendo().Grid<FinancePortfolio.Models.Stock>
            ()
            .Name("Grid")
            .Columns(columns =>
            {
                columns.Select().Width(27).ClientHeaderTemplate(" ");
                columns.Bound(p => p.Symbol).Title("Symbol").Width(80);
                columns.Bound(p => p.Name).Title("Name").Width(140);
                columns.Bound(p => p.Price).Title("Price").ClientHeaderTemplate("Price <span class='grid-header-subtitle'>(Intraday)</span>").ClientTemplate("<strong>#= currencyTemplate(data)# </strong>").Width(80);
                columns.Bound(p => p.DayChange).ClientTemplate("#= dayChangeTemplate(data)#").Title("Change").Media("(min-width: 768px)");
                columns.Bound(p => p.ChangePct).ClientTemplate("#= dayChangePctTemplate(data)#").Title("%Change").Media("(min-width: 768px)");
                columns.Bound(p => p.Volume).ClientTemplate("#= numbersTemplate(data, 'Volume')#").Title("Volume").Width(100).Media("(min-width: 768px)");
                columns.Bound(p => p.VolumeAvg).ClientHeaderTemplate("Avg Vol <span class='grid-header-subtitle'>(3 month)</span>").ClientTemplate("#= numbersTemplate(data, 'VolumeAvg')#").Title("Avg Vol").Media("(min-width: 768px)");
                columns.Bound(p => p.MarketCap).ClientTemplate("#= numbersTemplate(data, 'MarketCap')#").Format("").Title("Market Cap").Media("(min-width: 1200px)");
                columns.Bound(p => p.Pe).ClientHeaderTemplate("PE Ratio <span class='grid-header-subtitle'>(TTM)</span>").Title("PE Ratio").Media("(min-width: 1200px)");
                columns.Bound(p => p.Intraday).ClientHeaderTemplate("<strong>1 Day Chart</strong>").ClientTemplate(
                    Html.Kendo().Chart()
                        .Name("chart#=Id#")
                        .HtmlAttributes(new {  style = "height: 70px;" })
                        .ChartArea(x => x.Background("transparent").Opacity(0.2))
                        .Legend(l => l.Visible(false))
                        .SeriesDefaults(x => x.Area().Labels(l => l.Visible(false).Background("transparent")))
                        .Series(s =>
                        {
                            s.Area("Intraday").Markers(m => m.Visible(false)).Opacity(0.2);
                            s.Line("Intraday").Markers(m => m.Visible(false));
                        })
                        .Events(ev=>ev.DataBound("setNestedChartColor"))
                        .ValueAxis(x => x.Line(l => l.Visible(false)).MajorGridLines(x => x.Visible(false)).Labels(l => l.Visible(false)))
                        .CategoryAxis(x => x.Line(l => l.Visible(false)).MajorGridLines(x => x.Visible(false)))
                        .Tooltip(t => t.Visible(true))
                        .ToClientTemplate().Value)
                .Title("1 Day Chart").Width(215).Sortable(false);
            })
            .HtmlAttributes(new { style = "height: 920px" })
            .Editable(c=>c.DisplayDeleteConfirmation(true))
            .Sortable(true)
            .Scrollable(s => s.Virtual(true))
            .Events(e =>
            {
                e.DataBound("onGridDataBound");
                e.Change("onGridChange");
            })
            .DataSource(dataSource => dataSource
            .Ajax()
            .Model(m => m.Id(id=>id.Symbol))
            .Read(read => read.Action("ReadGridData", "Grid"))
            .PageSize(20)
            .ServerOperation(false)
            )
            )
    </div>
</div>

<script>
    // Select Only One Grid Row with the Checkbox Selectable Column
    function onClick(e) {
        var grid = $("#Grid").data("kendoGrid");
        var row = $(e.target).closest("tr");

        if (row.hasClass("k-state-selected")) {
            setTimeout(function () {
                var grid = $("#Grid").data("kendoGrid");
                grid.clearSelection();
            })
        } else {
            grid.clearSelection();
        };
    };

    $(function () {
        var grid = $("#Grid").data("kendoGrid");
        grid.tbody.on("click", ".k-checkbox", onClick);
    })
</script>