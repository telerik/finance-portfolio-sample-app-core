@*<div id="bottom-pane-content">
        Bottom pane
        @await Html.PartialAsync("Navigation", new NavigationModel { navigationIndex = 0, currentView = "Home" })

        @model IEnumerable<Stock>

        @{
            foreach (var item in Model)
            {
                <div>@item.Name</div>
            }
        }
    </div>*@

<div class="container bottom-pane-container">
    <div class="d-flex justify-content-center py-5 align-items-center">
        @await Html.PartialAsync("Navigation", new NavigationModel { navigationIndex = 0, currentView = "Home" })
    </div>


    <div class="row py-4 d-flex justify-content-between">
        <div class="col col-3 d-flex justify-content-start px-0">
            @(Html.Kendo().DropDownList()
                .Name("addNew")
                .DataTextField("Symbol")
                .DataValueField("Symbol")
                .Filter("Contains")
                .DataSource(source =>
                {
                    source.Read(read =>
                    {
                        read.Action("GetChartData", "Home");
                    });
                    source.ServerFiltering(false);
                })
                .Height(400)
                .Events(e => e.Change("addStock"))
                .ValueTemplate("<span class=\"k-icon k-i-plus\"></span>" +
                              "<span>Add new</span>")
            )
            @(Html.Kendo().Button()
                    .Name("removeButton")
                    .Icon("trash")
                    .HtmlAttributes(new { type = "button"  })
                    .Events(ev => ev.Click("removeRow"))
                    .Content("Remove"))
        </div>
    </div>

    <div class="row">
        @(Html.Kendo().Grid<FinancePortfolio.Models.Stock>()
            .Name("Grid")
            .Columns(columns =>
            {
                columns.Select().Width(27).ClientHeaderTemplate(" ");
                columns.Bound(p => p.Symbol).Title("Symbol").Width(80);
                columns.Bound(p => p.Name).Title("Name").Width(140);
                columns.Bound(p => p.Price).Title("Price").ClientHeaderTemplate("Price <span class='grid-header-subtitle'>(Intraday)</span>").ClientTemplate("<strong>#= currencyTemplate(data)# </strong>").Width(80);
                columns.Bound(p => p.DayChange).ClientTemplate("#= dayChangeTemplate(data)#").Title("Change").Media("(min-width: 768px)");
                columns.Bound(p => p.ChangePct).ClientTemplate("#= dayChangePctTemplate(data)#").Title("%Change").Media("(min-width: 768px)");
                columns.Bound(p => p.Volume).ClientTemplate("#= numbersTemplate(data, 'Volume')#").Title("Volume").Width(100).Media("(min-width: 768px)");
                columns.Bound(p => p.VolumeAvg).ClientHeaderTemplate("Avg Vol <span class='grid-header-subtitle'>(3 month)</span>").ClientTemplate("#= numbersTemplate(data, 'VolumeAvg')#").Title("Avg Vol").Media("(min-width: 768px)");
                columns.Bound(p => p.MarketCap).ClientTemplate("#= numbersTemplate(data, 'MarketCap')#").Format("").Title("Market Cap").Media("(min-width: 1200px)");
                columns.Bound(p => p.Pe).ClientHeaderTemplate("PE Ratio <span class='grid-header-subtitle'>(TTM)</span>").Title("PE Ratio").Media("(min-width: 1200px)");
                columns.Bound(p => p.Intraday).ClientHeaderTemplate("<strong>1 Day Chart</strong>").ClientTemplate("<div class='chart' style='width: 200px; height: 70px;'></div>").Title("1 Day Chart").Width(215).Sortable(false);
            })
            .HtmlAttributes(new { style = "height: 920px" })
            .Editable(c=>c.DisplayDeleteConfirmation(true))
            .Selectable(selectable => selectable.Mode(GridSelectionMode.Single))
            .Sortable(true)
            .Scrollable(s => s.Virtual(true))
            .Events(e =>
                          {
                              e.DataBound("onDataBound");
                              e.Change("showDeletBttnOnChange");
                          })
            .DataSource(dataSource => dataSource
                .Ajax()
                .Model(m => m.Id(id=>id.Symbol))
                .Read(read => read.Action("ReadGridData", "Grid"))
                .PageSize(20)
                .ServerOperation(false)
             )
        )
    </div>
</div>

